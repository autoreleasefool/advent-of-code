#!/usr/bin/env python3

from argparse import ArgumentParser
from enum import Enum
from shutil import copy
from datetime import datetime
import os
import sys
import subprocess
import webbrowser
import requests

cache_file = '.aoc_cache'

# Params
##################################################


class Challenge:
    def __init__(self, year=None, day=None):
        now = datetime.now()
        self.year = year if year else now.year
        self.day = day if day else now.day

        if int(self.day) < 10:
            self.day = '0{day}'.format(day=int(self.day))

    def validate_state(self):
        if not self.year:
            raise ValueError('Year is not available')
        if not self.day:
            raise ValueError('Day is not available')

    def __str__(self):
        return "{year}, {day}".format(year=self.year, day=self.day)

# AoC
##################################################


class AOC:
    def __init__(self, parser, override_year=None, override_day=None):
        self._parser = parser
        self._language = None
        self.session = None
        self.challenge = Challenge()
        if os.path.exists(cache_file):
            with open(cache_file) as cache:
                try:
                    lines = cache.readlines()
                    self.session = lines[3][lines[3].index('=') + 1:].strip()
                    self._language = SupportedLanguage.parse(lines[0][lines[0].index('=') + 1:].strip())

                    year = override_year if override_year else lines[1][lines[1].index('=') + 1:].strip()
                    day = override_day if override_day else lines[2][lines[2].index('=') + 1:].strip()
                    self.challenge = Challenge(year, day)
                except:
                    pass

        if self.is_valid_state():
            self.working_dir = os.path.join(
                str(self.challenge.year),
                'day_{day}'.format(day=self.challenge.day),
                self._language.id()
            )
        else:
            self.working_dir = None

    # Create
    ##################################################

    def create(self):
        if not self.is_valid_state():
            print('Invalid usage.')
            self._parser.print_help()
            return

        if os.path.exists(self.working_dir):
            return

        starter_file = os.path.join(
            '.',
            'util',
            self._language.id(),
            'starter{extension}'.format(extension=self._language.extension())
        )
        supporting_dir = os.path.join('.', 'util', self._language.id(), 'supporting_files')

        os.makedirs(os.path.join(self.working_dir, self._language.src_prefix()), exist_ok=True)

        if os.path.exists(starter_file):
            starter_dest = os.path.join(
                self.working_dir,
                self._language.src_prefix(),
                'day{day}{extension}'.format(day=self.challenge.day, extension=self._language.extension())
            )
            copy(starter_file, starter_dest)
            with open(starter_dest) as r:
                text = r.read() \
                    .replace('__year__', self.challenge.year) \
                    .replace('__day__', self.challenge.day)
            with open(starter_dest, 'w') as w:
                w.write(text)

        if os.path.exists(supporting_dir):
            copy_directory(supporting_dir, self.working_dir)

    # Fetch
    ##################################################

    def fetch(self):
        self._validate_state(with_session=True)

        input_file = os.path.join(
            '.',
            str(self.challenge.year),
            'day_{day}'.format(day=self.challenge.day),
            'input.txt'
        )
        if os.path.exists(input_file):
            return

        cookies = {'session': self.session}
        r = requests.get(
            'https://adventofcode.com/{year}/day/{day}/input'.format(
                year=self.challenge.year, day=int(self.challenge.day)),
            cookies=cookies
        )

        with open(input_file, 'w') as f:
            f.write(r.text)

    # Test
    ##################################################

    def test_all(self):
        self._validate_state()
        for day in range(1, 26):
            day_str = '0{day}'.format(day=int(day)) if day < 10 else str(day)
            output = os.path.join(
                str(self.challenge.year),
                'day_{day}'.format(day=day_str),
                'output.txt'
            )

            if not os.path.exists(output):
                print('No solution for day {day}, breaking.'.format(day=day))
                break

            aoc = AOC(self._parser, override_year=self.challenge.year, override_day=str(day))
            aoc.run(False)

    # Run
    ##################################################

    def run(self, save):
        self._validate_state()
        print('Running {year}, {day}:'.format(year=self.challenge.year, day=self.challenge.day))
        process = self._language.run(self, os.path.dirname(os.path.realpath(__file__)), self.working_dir)

        if process is None:
            print('Solution failed to run.')
            return

        response = process.stdout.decode('utf-8').strip()
        error = process.stderr.decode('utf-8').strip()

        if error:
            print(error)

        if process.returncode != 0:
            print(response)
            return

        print('-----\n{response}\n-----'.format(response=response))

        output_file = os.path.join(
            '.',
            str(self.challenge.year),
            'day_{day}'.format(day=self.challenge.day),
            'output.txt'
        )

        if response and save:
            print('Saving output: {response}'.format(response=response))
            with open(output_file, 'w') as solution_file:
                solution_file.write(response)
        else:
            if os.path.exists(output_file):
                with open(output_file) as solution_file:
                    solution = solution_file.read()
                    if solution == response:
                        print('The solution appears correct!')
                    else:
                        print('Solution does not match one found in {file}'.format(file=output_file))
                        print('\tExpected: {solution}'.format(solution=solution))
                        print('\tReceived: {response}'.format(response=response))
            else:
                print('Solution does not exist for validation. Skipping...')

    # Open
    ##################################################

    def open(self):
        self._validate_state()
        url = 'https://adventofcode.com/{year}/day/{day}'.format(year=self.challenge.year, day=int(self.challenge.day))
        webbrowser.open(url, new=2)

    def __str__(self):
        return 'language={language}\nyear={year}\nday={day}\nsession={session}'.format(
            language=self._language.id() if self._language else '',
            year=self.challenge.year if self.challenge else '',
            day=self.challenge.day if self.challenge else '',
            session=self.session  if self.session else ''
        )

    def set_env(self, session, language, year, day):
        if session:
            self.session = session
        supported_language = SupportedLanguage.parse(language)
        if supported_language:
            self._language = supported_language

        if year:
            self.challenge.year = year
        if day:
            self.challenge.day = day
            if int(self.challenge.day) < 10:
                self.challenge.day = '0{day}'.format(day=int(self.challenge.day))

        if self.is_valid_state():
            self.working_dir = os.path.join(
                str(self.challenge.year),
                'day_{day}'.format(day=self.challenge.day),
                self._language.id()
            )
        else:
            self.working_dir = None

    def cache_env(self):
        with open(cache_file, 'w') as cache:
            cache.write(str(self))

    def is_valid_state(self, with_session=False):
        try:
            self._validate_state(with_session=with_session)
            return True
        except:
            return False

    def _validate_state(self, with_session=False):
        if with_session and not self.session:
            raise ValueError('Session is not available')
        if not self._language:
            raise ValueError('Language is not available')
        if not self.challenge:
            raise ValueError('Year/Day is not available')
        self.challenge.validate_state()

# Main
##################################################


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    parser = ArgumentParser(description='Advent of Code')

    parser.add_argument(
        '-f', '--fetch',
        action='store_true',
        help='Fetch the input for the year/day'
    )

    parser.add_argument(
        '-r', '--run',
        action='store_true',
        help='Run the program for the language/year/day/part'
    )

    parser.add_argument(
        '-s', '--save',
        action='store_true',
        help='Save the output'
    )

    parser.add_argument(
        '-o', '--open',
        action='store_true',
        help='Open the challenge in the browser'
    )

    parser.add_argument(
        '-t', '--test',
        action='store_true',
        help='Run full test suite for a single language/year',
    )

    parser.add_argument('--session', help='Set your session. Cached for future runs')

    parser.add_argument('LANG', nargs='?', help='The language of the script to run. Cached for future runs')
    parser.add_argument('YEAR', nargs='?', help='The year of the script to run. Cached for future runs')
    parser.add_argument('DAY', nargs='?', help='The day of the script to run. Cached for future runs')
    aoc = AOC(parser)

    if args:
        parsed = parser.parse_args(args)

        aoc.set_env(parsed.session, parsed.LANG, parsed.YEAR, parsed.DAY)
        aoc.cache_env()
        aoc.create()

        if parsed.fetch:
            aoc.fetch()

        if parsed.test:
            aoc.test_all()
        elif parsed.run or parsed.save:
            aoc.run(parsed.save)

        if parsed.open:
            aoc.open()
    else:
        aoc.run(False)

# SupportedLanguage
##################################################

# pylint: disable=unsubscriptable-object, no-self-use, subprocess-run-check


class SupportedLanguage(Enum):
    # For description of params, see defs below
    HASKELL = ("haskell", ".hs", "", ".hsx", ['stack', 'ghc', '--'], False)
    PYTHON = ("python", ".py", "", "", [], False)
    RUBY = ("ruby", ".rb", "", "", [], False)
    RUST = ("rust", ".rs", "src", "", [], True)
    SWIFT = ("swift", ".swift", "", ".o", ["swiftc"], True)
    CSHARP = ("csharp", ".cs", "", "", [], True)

    @classmethod
    def parse(cls, language):
        for lang in list(cls):
            if language == lang.id():
                return lang
        return None

    def id(self):
        return self.value[0]

    def extension(self):
        return self.value[1]

    def src_prefix(self):
        return self.value[2]

    def compile_extension(self):
        return self.value[3]

    def compile_command(self):
        return self.value[4]

    def should_enter_directory(self):
        return self.value[5]

    def _source_file(self, challenge, base_directory):
        return os.path.join(
            base_directory,
            str(challenge.year),
            'day_{day}'.format(day=challenge.day),
            self.id(),
            '{day}{extension}'.format(day=challenge.day, extension=self.extension())
        )

    def _compile_file(self, challenge, base_directory):
        return os.path.join(
            base_directory,
            str(challenge.year),
            'day_{day}'.format(day=challenge.day),
            self.id(),
            'day{day}{extension}'.format(day=challenge.day, extension=self.compile_extension())
        )

    def _compile(self, challenge, command, base_directory):
        return subprocess.run(command + [
            self._source_file(challenge, base_directory),
            '-o',
            self._compile_file(challenge, base_directory),
        ])

    def _execute(self, command):
        return subprocess.run(command, capture_output=True)

    def run(self, aoc, base_directory, working_directory, is_recursed=False):
        if not is_recursed:
            if self.should_enter_directory():
                with cd(working_directory):
                    return self.run(aoc, base_directory, working_director, True)

        if self == SupportedLanguage.RUBY:
            return self._execute([self.id(), self._source_file(challenge, base_directory)])
        if self in [SupportedLanguage.SWIFT, SupportedLanguage.HASKELL]:
            compile_result = self._compile(challenge, self.compile_command(), base_directory)
            if compile_result.returncode != 0:
                print('Compilation failed.')
                return None
            return self._execute([self._compile_file(challenge, base_directory)])
        if self == SupportedLanguage.RUST:
            return self._execute(['cargo', 'run'])
        if self == SupportedLanguage.CSHARP:
            return self._execute(['dotnet', 'run'])
        if self == SupportedLanguage.PYTHON:
            with cd(os.path.join('.', 'util', 'python')):
                return self._execute([
                    'python',
                    '-m', 'runner',
                    '--year', aoc.challenge.year,
                    '--day', aoc.challenge.day,
                    '--session', aoc.session,
                ])
        return None

# Change Directory
##################################################


class cd:
    def __init__(self, new_path):
        self.new_path = os.path.expanduser(new_path)
        self.saved_path = None

    def __enter__(self):
        self.saved_path = os.getcwd()
        os.chdir(self.new_path)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.saved_path)


def copy_directory(src, dest):
    for src_dir, _, files in os.walk(src):
        dst_dir = src_dir.replace(src, dest, 1)
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        for f in files:
            src_file = os.path.join(src_dir, f)
            dst_file = os.path.join(dst_dir, f)
            if os.path.exists(dst_file):
                os.remove(dst_file)
            copy(src_file, dst_dir)


if __name__ == "__main__":
    main()
